#setup variables
10001011000 11111 000000 11111 00000 //ADD X0, X31, X31 -- &a[0] (which is 0 for our array)
1001000100 000000001010 11111 00001 //ADDI X1, X31, #10 -- n (size of array a[])
1001000100 000000000001 11111 00010 //ADDI X2, X31, #1 -- Boolean variable for while loop
10001011000 11111 000000 11111 00100 //ADD X4, X31, X31 -- j (start at 0)
10001011000 11111 000000 11111 00101 //ADD X5, X31, X31 -- i (start at 0)
#WHILE 
10110100 0000000000000010100 00010 //CBZ X2, EXIT (+20) -- checks if x2 is true (1) or false (0)
10001011000 11111 000000 11111 00010 //ADD X2, X31, X31 -- set boolean variable to false (0)
1001000100 000000000001 00100 00100 //ADDI X4, X4, #1 -- increment x4 
10001011000 11111 000000 11111 00101 //ADD X5, X31, X31 -- i (reset to 0 if not first loop)
10001011000 11111 000000 11111 00000 //ADD X0, X31, X31 -- &a[0] reset starting position of address
#FOR
11001011000 00100 000000 00001 00011 //SUB X3, X1, X4 -- n - j
11001011000 00101 000000 00011 00011 //SUB X3, X3, X5 -- (n - j) - i
10110100 1111111111111111001 00011 //CBZ X3, WHILE (-7)-- Break if i = n-j
11111000010 000000000 00 00000 00110 //LDUR X6,[X0,#0] -- get a[i] in x6
11111000010 000001000 00 00000 00111 //LDUR X7,[X0,#8] -- get a[i+1] in x7
11101011000001110000000011000011 //SUBS X3, X6, X7 -- a[i] - a[i+1]
010101000000000000000000110 01101 //B.LE SKIP (+5) -- Break if a[i] <= a[i+1]
11111000010 000000000 00 00000 01001//LDUR x9, [x0,#0] -- load a[i] into x9
11111000010 000001000 00 00000 01011//LDUR x11, [x0,#8] -- load a[i+1] into x11
11111000000 000000000 00 00000 01011//STUR x11, [x0,#0] -- store x11 into a[i]
11111000000 000001000 00 00000 01001//STUR x9, [x0,#8] -- store x9 into a[i+1]
1001000100 000000000001 11111 00010 //ADDI X2, X31, #1 -- set boolean variable to true (1)
#SKIP
1001000100 000000001000 00000 00000 //ADDI X0, X0, #8 -- increment x0 (X0 == &a[i])
1001000100 000000000001 00101 00101 //ADDI X5, X5, #1 -- increment x5
00010111111111111111111111110010 //B FOR (-14) -- Break to for loop
#EXIT
11111111111  
11111111111
11111111111
11111111111
11111111111